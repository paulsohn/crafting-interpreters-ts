// this file is autogenerated by GenerateAst.ts

import { Token, Primitive } from './Token'
import { Expr } from './Expr'

export abstract class Stmt {
    abstract accept<R>(visitor: Visitor<R>): R
}

export class Block extends Stmt {
    statements: Stmt[];

    constructor(statements: Stmt[]){
        super();
        this.statements = statements;
    }

    override accept<R>(visitor: Visitor<R>): R {
        return visitor.visitBlockStmt(this);
    }
}

export class Expression extends Stmt {
    expression: Expr;

    constructor(expression: Expr){
        super();
        this.expression = expression;
    }

    override accept<R>(visitor: Visitor<R>): R {
        return visitor.visitExpressionStmt(this);
    }
}

export class Var extends Stmt {
    name: Token;
    initializer: Expr | null;

    constructor(name: Token, initializer: Expr | null){
        super();
        this.name = name;
        this.initializer = initializer;
    }

    override accept<R>(visitor: Visitor<R>): R {
        return visitor.visitVarStmt(this);
    }
}

export class If extends Stmt {
    condition: Expr;
    thenBranch: Stmt;
    elseBranch: Stmt | null;

    constructor(condition: Expr, thenBranch: Stmt, elseBranch: Stmt | null){
        super();
        this.condition = condition;
        this.thenBranch = thenBranch;
        this.elseBranch = elseBranch;
    }

    override accept<R>(visitor: Visitor<R>): R {
        return visitor.visitIfStmt(this);
    }
}

export class While extends Stmt {
    condition: Expr;
    body: Stmt;
    increment: Expr | null;

    constructor(condition: Expr, body: Stmt, increment: Expr | null){
        super();
        this.condition = condition;
        this.body = body;
        this.increment = increment;
    }

    override accept<R>(visitor: Visitor<R>): R {
        return visitor.visitWhileStmt(this);
    }
}

export class Print extends Stmt {
    expression: Expr;

    constructor(expression: Expr){
        super();
        this.expression = expression;
    }

    override accept<R>(visitor: Visitor<R>): R {
        return visitor.visitPrintStmt(this);
    }
}

export class Control extends Stmt {
    keyword: Token;
    value: Expr | null;

    constructor(keyword: Token, value: Expr | null){
        super();
        this.keyword = keyword;
        this.value = value;
    }

    override accept<R>(visitor: Visitor<R>): R {
        return visitor.visitControlStmt(this);
    }
}

export interface Visitor<R> {
    visitBlockStmt(stmt: Block): R;
    visitExpressionStmt(stmt: Expression): R;
    visitVarStmt(stmt: Var): R;
    visitIfStmt(stmt: If): R;
    visitWhileStmt(stmt: While): R;
    visitPrintStmt(stmt: Print): R;
    visitControlStmt(stmt: Control): R;
}

